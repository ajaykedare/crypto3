\documentclass{article}
\usepackage{graphics}
\usepackage{graphicx}
\usepackage[T1]{fontenc}
\usepackage{float}
\usepackage[margin=1in]{geometry}
\usepackage[utf8]{inputenc}

\DeclareGraphicsExtensions{.eps}


\title{CS 742 Foundations of Network Security and Cryptography \\ Assignment 3}
\author{
  Ajay Kedare \\
  153059007
  \and
  Astha Jada \\
  153050027
  \and
  Neha Garg \\
  153050039
  \and
  Sankalp Rangare \\
  153050087
}

\begin{document}
\maketitle
\clearpage

\section{Re-design the Needham-Schroeder protocol to use as few messages as possible. Prove
informally that your protocol is secure.
If you could use timestamps in lieu of ( or in addition to nonces), what is the smallest
number of messages you need to achieve the same functionality provided by the
Needham-Schroeder protocol? Show your new design.}

 \begin{enumerate}
  \item $A \rightarrow KDC: M,A,B,R1$
  \item	$KDC \rightarrow A: M,\{T_s,V,K_{ab},B,R1,\{T_s, V, K_{ab},A\}K_{bs}\}K_{as}$
  \item $A \rightarrow B: \{T_s, V, K_{ab},A\}K_{bs},\{T_a\}K_{ab}$
  \item $B \rightarrow A: \{T_a+1,Tb\}_{K_{ab}}$
  \item $A \rightarrow B: \{T_b+1\}_{K_{ab}}$
 \end{enumerate} 
 
 \noindent Here, $T_a$ , $T_b$ and $T_s$ are the timestamps. \\ 
 M is session identifier. \\
 V is validity of message. \\
 
 \noindent 
 $A \rightarrow KDC: M,A,B,R1$ \\ First, A sends to KDC, message identifier, and nonce R1 along with "A" and "B".\\ \\
 $KDC \rightarrow A: M,\{T_s,V,K_{ab},B,R1,\{T_s, V, K_{ab},A\}K_{bs}\}K_{as}$\\ Now the key part is when KDC 
 sends the timestamp and validity to A and also includes it in the ticket for B which is encrypted with $K_{bs}$. 
 Ticket, $\{T_s, V, K_{ab},A\}K_{bs}$ contains the actual session key between A and B i.e. $K_{ab}$. \\ \\
 $A \rightarrow B: \{T_s, V, K_{ab},A\}K_{bs},\{T_a\}K_{ab}$ \\ 
 A verifies the nonce R1 and forwards the ticket recieved from KDC to B along with new timestamp $T_a$ encryted with session key $K_{ab}$. \\ \\ 
 $B \rightarrow A: \{T_a+1,Tb\}_{K_{ab}}$ \\
 B decrypts the ticket, and collect the session key $K_{ab}$ and also verify that the timetamp from server and validity mentioned is correct or not.
 If it is not then B can reject this message. B again sends his timestamp to A and verifies the timestamp challenge of A\\ \\
 $A \rightarrow B: \{T_b+1\}_{K_{ab}}$ \\
 A now decrypts the message with the session key $K_{ab}$ and sends verification for B's timestamp. \\ \\
 
 Hence any replay attack is not possible since B is verifying the the timestamp of B's ticket generation and its validity.
 Also while sending the message to A, B is veryfying the A's timestamp and also sending back the B's timestamp to be verified by A.

 
 

 
\section{Study the following attacks on SSL or on OpenSSL – BEAST, Heartbleed, Fluke. For each
attack answer the following:
What does the attack accomplish?
Desribe a “typical” attack scenario.
What is the vulnerability behind the attack?
How can the attack be defended against?}

\subsection{Beast}
\subsubsection{What does the attack accomplish?}

\indent \indent BEAST Attack which stands for {\it Browser Exploit Against SSL/TLS Attack} is based on "chosen plain text attack". TLS 1.0 uses CBC (Cipher Block Chaining) mode of operation for encryption. CBC modes makes use of previous cipher text block  $C_{i-1}$ as the initialization vector (IV) for encrypting the next plain text block $P_{i}$.

If an attacker is sniffing the encrypted data sent by the browser, then he/she will be able to obtain the IV that will be used for the next message encyption. So if the attacker can make a guess at the session cookie ($P_{i}$) and see if this new  cipher text ($C'_{i}$) matches with original cipher text ($C_{i}$) then attacker has made a correct guess at the session cookie.

\subsubsection{Desribe a “typical” attack scenario.}
\indent \indent Considering that attacker has identified a  block of ciphertext Ci that he/she wants to decrypt, becuase it contains the session cookie. Now as he already sinffed the network so he already has Ci-1 with him.
As per CBC mode of operation: $C_i=Ek(P_i \oplus C_{i-1})$
Attacker will write a Javascript program to transmit any chosen plain text block $P_i$ that he/she wants to encrypt. Then it will produce a ciphertext $C'_i$ that attacker can sniff.
Suppose attacker has correctly guessed the plain text $P_i$ then attacker will generate $P'_i= IV \oplus P_i \oplus C_{i-1}$. Now with the help of the javascript which attacker has created he will force $P_i$ to be replaced with $P'_i$. Now TLS layer will encrypt it as: \\ 

\noindent $C'_i = Ek(IV \oplus P'_i)$ \\
After putting $P'_i$ value we'll get \\ 
$C'_i = Ek(IV \oplus IV \oplus P_i \oplus C_{i-1}) $\\ 
IV $\oplus$ IV will cancel out each other we will get\\
$C'_i = Ek(P_i \oplus C_{i-1})$ \\
If this $C'_i$ is identical to $C_i$ we can conclude that attacker has correctly guess the plain text block $P_i$. If they are not identical then attacker needs to guess the plain text block untill he/she finds a match.

\subsubsection{What is the vulnerability behind the attack?}
\indent \indent As TLS 1.0 uses CBC (Cipher Block Chaining) mode of operation for encryption. CBC modes makes use of previous cipher text block $C_{i-1}$ as the initialization vector (IV) for encrypting the next plain text block $P_i$.

\subsubsection{How can the attack be defended against?}
\indent \indent This attack can be avoided by instead of directly using previous cipher text block as IV we can have explicit IV for each block to be encypted. This attack was addressed in TLS 1.1 and TLS 1.2 by the use of “explicit IVs” for each block.

\subsection{Heartbleed}

\indent \indent OpenSSL versions 1.0.1 through 1.0.1f (inclusive) are vulnerable to the heartbleed attack.
In SSL when client communicates to the server it regularly sends heartbeat messages to the server to see if the server is alive. If the server is alive it sends reply back to the client. Both server and client sends out messages regularly to make sure both the parties are alive. This feature is used in the heartbleed attack.

The heartbeat message consists of a payload, typically a text string, along with the payload's length as a 16-bit integer. The receiving computer then must send exactly the same payload back to the sender. The vulnerable versions of OpenSSL allocate a memory buffer for the message to be returned based on the length field in the requesting message, without checking the actual size of that message's payload. As proper bound checking is not done the message returned consists of the payload, possibly followed by whatever else happened to be in the allocated memory buffer.

\subsubsection{What does the attack accomplish?}
\indent \indent Heartbleed is therefore exploited by sending a malformed heartbeat request with a small payload and large length field to the vulnerable party permitting attackers to read up to 64 kilobytes of the victim's memory.Attackers in this way could receive sensitive data, compromising the confidentiality of the victim's communications like username,passwords etc. The worse thing is that sometimes the private key can also be exposed and the attacker which would enable attackers to decrypt communications.

\subsubsection{Desribe a “typical” attack scenario.}
\indent \indent A Heartbeat Request might ask a party to "send back the three-letter word 'abc'", resulting in a response of "abc" while a  malicious heartbeat request of "send back the 500-letter word 'abc'" would cause the victim to return "abc" followed by whatever 497 characters the victim happened to have in active memory.As described above this may cause the victim to send sensitive data to the attacker.

\subsubsection{What is the vulnerability behind the attack?}
\indent \indent The vulnerability of this attack lies in the OpenSSL implementation. Here the receiver of heartbeat message does not check the bounds i.e if the length is same as the message received.


\subsubsection{How can the attack be defended against?}
\indent \indent The attack can be defended by doing proper bound checking. Also if the private key is compromised it should be revoked and new private key should be used, else the attacker may decrypt the message or can also change the message.

\subsection{Freak}
\indent \indent FREAK (Factoring RSA Export Keys) is a security exploit of a cryptographic weakness in the SSL/TLS protocols.The vulnerability was introduced during 1990's, when the US government banned selling strong cryptographic software overseas, unless it used export cipher suites which involved encryption keys no longer than 512-bits so it can be decrypted by NSA.

The need to support export cipher suites led to some technical challenges. Since U.S. servers needed to support both strong and weak cryptographic algorithms, the SSL designers used a 'cipher suite' negotiation mechanism to identify the best cipher both parties could support. As a result the strong cipher can be used when available and weaker otherwise.

\subsubsection{What does the attack accomplish?}
\indent \indent Using this attack an attacker can impersonate as the client and exchange messages with the server. The message can also be modified by the attacker.

\subsubsection{Desribe a “typical” attack scenario.}
\indent \indent FREAK attack basically is a  Man in the Middle(MITM) attack that uses export cipher suite. The attack can be done as follows: \\
\begin{enumerate}
 \item The client asks the server for the standard 'RSA' ciphersuite.
 \item The MITM attacker changes this message and asks for 'export RSA'.
 \item The server then responds with a 512-bit export RSA key, signed with its long-term key.
 \item The client accepts this weak key due to the bug in OpenSSL implementation.
 \item The attacker factors the RSA modulus to recover the corresponding RSA decryption key.
 \item When the client encrypts the 'pre-master secret' to the server, the attacker can now decrypt it to recover the 'master secret'.
 \item From here on, the attacker sees plaintext and can inject anything it wants.
\end{enumerate}

\subsubsection{What is the vulnerability behind the attack?}
\indent \indent The vulnerability behind this attack is that export cipher suites are still supported by some of the servers and they can be easily decrypted.

\subsubsection{How can the attack be defended against?}
\indent \indent The server should disable support for any export suites. Administrators should be encouraged to disable all insecure ciphers and enable suites which support perfect forward secrecy i.e if a session key is revealed it should not affect the future messages and they cannot be decrypted.

\section{Buffer overflow vulnerability}

\subsection{On linux machine(x86\_64)}
  We tried buffer overflow attack using  x=56 and y=7 and it worked.\\
        
  \noindent 1. We disabled canary variable and make Stack executable and compiled program using:\\
  \textbf{\tt gcc -g -fno-stack-protector -z execstack -o prog prog.c}\\\\
  2. Now we started to debug the program using \textbf{gdb}.\\
    We added a break point in function \textbf{A( )} and analysed the program.\\
    We checked the address of local varibales of function \textbf{A( )}.\\
  
  \begin{figure}[htb]
    \begin{center}
	\includegraphics[width=8cm,height=5cm]{bo.png}
	\caption{Address of local varibales.}
    \end{center}
  \end{figure}
      After getting the address of local variables we 'disassemble' the main function
      and checked the return address of function \textbf{A( )}.\\
      
       
   
   \begin{figure}[htb]
      \begin{center}
		\includegraphics[width=8cm,height=4cm]{bo1.png}
	\caption{Return address of function A()}
      \end{center}      
    \end{figure}
        

    3. Using the command \textbf{tt x/16xw Address} in \textbf{gdb} we can analyze the contents of given address and
    the next 16 words of this address(word=4 bytes).\\
    So we analyze the memory address of 'buf2' variable which was obtained in previous steps.\\
    
     
        \begin{figure}[H]
	  \begin{center}
		\includegraphics[width=8cm,height=2cm]{bo2.png}
	\caption{Contents of memory address}
	 \end{center}
	\end{figure}
	
		
	All the above contents are in stack of function \textbf{A( )}.\\
	We can see the return address of \textbf{A( )} is stored in the stack and we have to change this return address.\\ 
        Since,return address is stored at the 14th word(starting from address of buf2),which is 56 bytes(14*4 bytes=56 bytes)
        away from address of \textbf{buf2}.\\
        So,\\
          we have \textbf{ptr=buf2 + 56};\\
          Now \textbf{ptr} is pointing to return addres of \textbf{A( )}.\\
          As we can see from the assembly code of main function,next address after the return address of \textbf{A()} is \textbf{0x400587}.\\
          So we change the return address by adding \textbf{7} to the content of \textbf{*ptr} variable.\\
          Finally,the output of program will be \textbf{1} not \textbf{2}(as a result of buffer overflow attack).\\

\end{document}

